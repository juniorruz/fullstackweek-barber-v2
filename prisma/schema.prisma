generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  phone         String?
  image         String?
  password      String?
  accounts      Account[]
  bookings      Booking[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barber {
  id        String              @id @default(uuid())
  name      String
  address   String
  phones    String
  imageUrl  String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  bookings  Booking[]
  services  BarbershopService[]

  businessHours BusinessHours[]
}

model BusinessHours {
  id             String  @id @default(uuid())
  barberId       String
  isOpen         Boolean
  dayOfWeek      String
  startTime      String
  endTime        String
  lunchStartTime String
  lunchEndTime   String
  barber         Barber  @relation(fields: [barberId], references: [id])

  Booking Booking[]
}

model BarbershopService {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  duration    Int
  barberId    String
  price       Decimal   @db.Decimal(10, 2)
  bookings    Booking[]
  barber      Barber    @relation(fields: [barberId], references: [id])
}

model Booking {
  id              String            @id @default(uuid())
  userId          String
  serviceId       String
  date            DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  clientName      String?
  barberId        String?
  businessHoursId String?
  service         BarbershopService @relation(fields: [serviceId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  barber          Barber?           @relation(fields: [barberId], references: [id])
  businessHours   BusinessHours?    @relation(fields: [businessHoursId], references: [id])
}
